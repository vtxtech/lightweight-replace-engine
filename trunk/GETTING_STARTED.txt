# -----------------------------------------------------------------------------
#
# Lightweight Replace Engine
# Copyright (C) 2012-2013 Johannes Scholz. All rights reserved.
#
# This file is licensed under the GNU Lesser General Public License 3 (LGPLv3),
# but is distributed WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# -----------------------------------------------------------------------------
# LRE uses some portions of code from the great OpenSceneGraph project which
# are licensed under the OSGPL which is mainly a LGPL-derivate.
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
# What is LRE?
# --------------------
# Lightweight Replace Engine is a easy-to-use text file preprocessor that is
# used to generate text documents based on template documents. LRE does have no
# dependencies so it may be used as single file standalone executable for
# preprocessing any type of text file. LRE may also be used as linked C++
# library directly from inside your C++ source code.
#
# LRE is intended to create offline documentation files (e.g. tex, txt or csv)
# from your application's source code or internal application data. Actually
# LRE may also be used to preprocess any programming languages source files
# where preprocessing by CMake's "configure_file" or any other build system you
# use is not applicable. This may be the case if inclusion of runtime
# information is necessary to generate your target files. 
# 
# -----------------------------------------------------------------------------
# Downloading LRE
# --------------------
# Currently there is source code released, only. At the moment we do not
# provide binary releases. If you intend to use LRE please checkout the sources
# and compile by yourself.
#
# -----------------------------------------------------------------------------
# Building LRE
# --------------------
# 
# For building LRE the cross-platform make tool CMake is required to generate
# project files suiting your compiler. LRE is both tested on Windows and Linux.
#
# Supported (tested) compilers:
#  * Windows: Visual Studio 2008 Express
#  * Linux: gcc 4.6 on lubuntu 11.04, but LRE should compile on gcc 4.4 or
#    higher, as well.
#
# We recommend using "cmake-gui" rather than the commandline version if you are
# not familiar with CMake.
#  # Checkout latest tagged or trunk version of LRE from Subversion (see
#    "Source" page). Remember checkout path, e.g. "/home/my_user/LRE-trunk"
#    or "C:\LRE\trunk"
#  # Run cmake-gui
#    # Setup source path to your checkout path, e.g. "/home/my_user/LRE-trunk"
#      or "C:\LRE\trunk"
#    # Setup build path to a folder of your choice, e.g.
#      "/home/my_user/LRE-build" or "C:\LRE\build"
#    # Press "Configure" button and select your target make tool or IDE (e.g.
#      Visual Studio, Eclipse CDT, make, etc.)
#    # Setup CMAKE_INSTALL_PREFIX to the directory where the LRE binaries
#      should be installed to.
#    # Setup LRE_SHARE_INSTALLDIR to the directory where data, tests and
#      examples should be installed to.
#    # Press "Configure" button until there are no more red lines and
#      "Generate" button is active
#    # Press "Generate" to finish
#
# On Windows default CMake settings should be fine.
#
# On Linux you might think about either installing into "/usr" instead of
# "/usr/local" (set your CMAKE_INSTALL_PREFIX) or you set the LD_LIBRARY_PATH
# according to your settings (e.g. "/usr/local/lib"). The LRE CMake build
# script reports some help on that during configuration.
#
# One general hint regardless of which compiler you may use: *Always build the
# INSTALL project* to make sure your build files are copied to the appropriate
# locations. When using make that means: Always execute "make", then
# "make install". When using Visual Studio that means: Right click on the
# "INSTALL" project, then select "Build".
#
# -----------------------------------------------------------------------------
# Licensing of LRE
# --------------------
# LRE is supplied AS-IS without any warranty and is licensed under the
# GNU Lesser GPL Version 3.0.
# If you require commercial support feel free to mail the developer.
# 
# -----------------------------------------------------------------------------
# Usage of LRE
# --------------------
# LRE features a simple XML-like syntax to define placeholders inside the
# template documents. During generation run that placeholders are replaced by
# values from your user defined data sets. LRE comes with a set of examples and
# test cases documenting most use-cases for easily getting started.
#
#
# ==Files-only example==
# The easiest example of usage is using template input and data files both from
# disk:
# 
# *Template files* usually have a `*`.in extension. Content of example1.csv.in
# defining the template document:
# Name;Englisch description;German description
# <LRE:COMPONENT:Command><LRE:KEY:name>;<LRE:KEY:description_en>;<LRE:KEY:description_de></LRE:COMPONENT:Command>
# 
# *Data files* usually end with `*`.lre extension. Contents of data.lre:
# <LRE:COMPONENT:Command>
# 	<LRE:SET>
# 		<LRE:KEY:description_de>Importiert eine Geometriedatei</LRE:KEY:description_de>
# 		<LRE:KEY:description_en>Imports a geometry file</LRE:KEY:description_en>
# 		<LRE:KEY:name>import</LRE:KEY:name>
# 	</LRE:SET>
# 	<LRE:SET>
# 		<LRE:KEY:description_de>Beendet die Anwendung</LRE:KEY:description_de>
# 		<LRE:KEY:description_en>Exits application</LRE:KEY:description_en>
# 		<LRE:KEY:name>exit</LRE:KEY:name>
# 	</LRE:SET>
# </LRE:COMPONENT:Command>
#
# *Running LRE*: LRE may be run on a command line terminal using the lre
# executable.
# lre --input <path>/example1.csv.in --data <path>/data.lre --output <output-path> --appendix \n --noFinalAppendix
#
# Description of command line arguments used in example (this is only an
# extract of the arguments available):
# --input <path or filename>: Sets the input path or filename. Required option.
# --data <path or filename>: Data file containg lre::Components or path to
#                            multiple files matching --dataPattern. Empty by
#                            default. Required option, if no data is defined
#                            in source code, only.
# --output <path>: Sets the output path. Required option.
# --appendix <string>: Define a string (e.g. line break) that shall be appended
#                      after each generated set
# --noFinalAppendix: Disable appendix string for the last set of a
#                    lre::Component
# 
# *Result files* usually have the last extension of the template file removed.
# So, then the resulting output file will be: example1.csv.
#
# This is a list of the available commands:
# Name;Englisch description;German description
# import;Imports a geometry file;Importiert eine Geometriedatei
# exit;Exits application;Beendet die Anwendung
# 
# ==From-source example==
# LRE may also be run as a linked library from inside your C++ application.
# Note that only input files are read and any data applied to the templates
# code is defined from source.
# 
# /*
#  * Lightweight Replace Engine - Example for built-in data
#  * Copyright (C) 2012-2013 Johannes Scholz. All rights reserved.
#  *
#  * This file is licensed under the GNU Lesser General Public License 3 (LGPLv3),
#  * but distributed WITHOUT ANY WARRANTY; without even the implied warranty of
#  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  *
#  */
# 
# #include <lre/ReplaceEngine.h>
# 
# //-- STL --//
# #include <iostream>
# 
# int main(int argc, char** argv)
# {
# 	// Create a ReplaceEngine to do the job
# 	lre::ReplaceEngine re;
# 	
# 	// Ignore any command line arguments
# 	// we setup everything manually here.
# 	re.setInput("../data");
# 	re.setOutputDirectory("./generated");
# 	re.setRecursive(true);
# 	re.setRemoveExtension(true);
# 	re.setFilePattern("*.in");
# 	re.setAppendixString("\n");
# 	re.setAddAppendixAfterLastSet(false);
# 	
# 	// *re.setDataDirectory(...)* is not required because
# 	// the data used for replacing is following now:
# 
# 	// Add the data for file generation here
# 	lre::Component* cmd = re.addComponent("Command");
# 	lre::Set* set1 = cmd->addSet();
# 	set1->addPair("name", "import");
# 	set1->addPair("description_en", "Imports a geometry file");
# 	set1->addPair("description_de", "Importiert eine Geometriedatei");
# 	lre::Set* set2 = cmd->addSet();
# 	set2->addPair("name", "exit");
# 	set2->addPair("description_en", "Exits application");
# 	set2->addPair("description_de", "Beendet die Anwendung");
# 
# 	// Finally to the work
# 	return re.run();
# }
# 
# Running the code from above generates output data identical to the first example:
# This is a list of the available commands:
# Name;Englisch description;German description
# import;Imports a geometry file;Importiert eine Geometriedatei
# exit;Exits application;Beendet die Anwendung
# 
# -----------------------------------------------------------------------------
# Commercial Support
# -------------------- 
# If you require commercial support feel free to mail the developer.
# 